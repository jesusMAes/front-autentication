esto se parece más a una aplicación clasica pero siempre viene bien documentar el react porque es un follón y vamos a estar usando bootstrap. Comenzamos con el npx create react app y tal te genera sus cosas, no he querido tocar nada por no liarla, en app.js importamos react-boostrap como un archivo de estilo

Lo siguiente en app.js ponemos una funcion app que da un div container con un row y dos columnas, dentro de cada columna metemos un componente de react que creamos aparte y que son básicamente dos formularios

estos formularios tienen un h2, un form y dos form.group cada uno con un label y un input, lo interesante es que antes del return definimos unas variables con la sintaxis de hook: let [nombredelavariable, funcionquelacambia] = useState('') esto permite crear una función que actualiza esa variable, así dentro del input de cada campo del formulario ponemos un onchange y su evento es que le pasa el evento y con el usando esa función y e.target.value cambiamos el valor de la variable. Luego tanto en el formulario en si como en el botón submit añadimos en uno onSubmit y en otro onclick, ambos disparan la función handleSubmit, esta función es la que hace la petición a la api.

Para hacer la peticion necesitamos usar axios que se instala y se importa como cualquier librería, luego dentro de ella importante el prevent default para que la pagina no recargue, creamos un objeto con la configuración de axios, ese objeto lleva el metodo de la petición, la url a la que se pide, y los datos que van en el body, luego usando axios(configuration) ejecutamos esa petición y la api nos devolverá algo, si es positivo nos da un rrsultado, si es negativo un error, gestionamos esto con un then/catch, no estamos usando los datos que nos devuelve aún pero nos sirve para usando la función setRegister/setLogin cambiar el estado de esa variable a true

En la zona del render tenemos algo nuevo y es un render condicional que funciona con la variable register, tiene este formato:
{ variable ? (renderizado si es true): (renderizado si es false)}
en ambas condiciones renderiza un <p> pero con clases distintas que cambian el color y contenido distinto

PROTEGER UNA RUTA:
Para proteger una ruta debemos usar un componente que nos ayude a verificar el token que se genera en la llamada de login, recuerda que en el back al hacer post en login devolviamos los datos del usuario y el token que se genereba, entonces ahora tenemos que usar el paquete de cookies para coger ese token y hacer que esté accesible de forma global para toda la aplicación en lugar de solo para el componente que recibió ese dato. Así en cada página que necesite protegerse podemos chequearlo sin repetir el proceso

Para usarlo nos vamos a login que es donde recibimos el token, importamos Cookies, inicializamos una variable usando su constructor y luego en then, que es donde recibimos el response de la api con el email del usuario, su id y su token le decimos: cookies set(nombredelacookie, valor, opciones) el nombre es Token pero podría ser el que queramos el valor es cuestión de coger el objeto result que nos entrega la api, entrar a su data y  coger el token, si no sale pues haces console.log para ver el objeto y te apañas para llegar a su contenido, luego en opciones lo importante es la opción path, es un valor que dice desde qué partes se va a poder leer esa cookie, si pones "/" estás diciendo que toda la aplicación tiene acceso

COMPONENTE PROTECTED ROUTES
Tremendo pifostio me ha montado en un momento, a ver tiene una forma rara pero dont panic, lo que crea esta función es una plantilla. El componente recibe otro componente, en este caso el componente de authroute y decide si redirigir o no, lo que lo hace lioso es como está redactado, pero en realidad solo mira si hay un token valido o no y redirige a otro lado

basicamente lo que estoy viendo es un componente route ni más ni menos, recibe rest en parametros y tiene un parametro render que coje las props y comprueba el token, si es valido retorna, es decir, renderiza, el componente que debía renderizar, pasandole también las props (esto en caso de que ese componente necesite props, como esto hace de intermediario si no lo pasas pierdes info) en caso contrario lo que contiene el render es un componente redirect que tiene sus propiedades para indicar a donde. En realidad no es tan difícil pero la forma de redactarse es feísima